# Form implementation generated from reading ui file 'gui2.ui'
#
# Created by: PyQt6 UI code generator 6.2.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.dirname(SCRIPT_DIR))

from PyQt6 import QtCore, QtGui, QtWidgets
import csv

import utils

import json

from axie import (
    AxiePaymentsManager,
    AxieClaimsManager,
    AxieTransferManager,
    Axies,
    AxieMorphingManager,
    AxieBreedManager,
    QRCodeManager
)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.account = "ronin:080f96b040128f66b8c7330eb324154764211c52"
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred,
                                           QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)

        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setObjectName("tableView")
        self.verticalLayout.addWidget(self.tableView)

        self.model = QtGui.QStandardItemModel(MainWindow)
        self.tableView.setModel(self.model)

        self.addButton = QtWidgets.QPushButton("Add Scholar", MainWindow)
        self.verticalLayout.addWidget(self.addButton)

        self.buttonBox = QtWidgets.QDialogButtonBox(self.centralwidget)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.StandardButton.Ok |
                                          QtWidgets.QDialogButtonBox.StandardButton.Open)
        self.buttonBox.setObjectName("buttonBox")
             
        self.buttonBox.button(QtWidgets.QDialogButtonBox.StandardButton.Ok).clicked.connect(self.payButton)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.StandardButton.Open).clicked.connect(self.claimButton)

        self.verticalLayout.addWidget(self.buttonBox)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 640, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.paymentsFile = "./payments.csv"

        self.initTable()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # https://stackoverflow.com/questions/15416663/pyqt-populating-qtablewidget-with-csv-data
    def initTable(self):        

        allSelected = True

        with open(self.paymentsFile, "r") as fileInput:
            allSelected = True
            csvOutput = csv.reader(fileInput)

            for row in csvOutput:
                if row[0] == 'False':
                    allSelected = False

        with open(self.paymentsFile, "r") as fileInput:
            csvOutput = csv.reader(fileInput)

            i = 0

            for row in csvOutput:
                items = [
                    QtGui.QStandardItem(field)
                    for field in row
                ]
                self.model.appendRow(items)
        
                if not allSelected and row[0] == 'True':
                    self.tableView.selectionModel().select(self.model.index(i, 0),
                                                           QtCore.QItemSelectionModel.SelectionFlag.Select |
                                                           QtCore.QItemSelectionModel.SelectionFlag.Rows)
                i += 1

        self.tableView.setColumnHidden(0, True)

        self.updateButtonLabels()
        self.tableView.selectionModel().selectionChanged.connect(self.updateButtonLabels)

    def saveTable(self):
        with open(self.paymentsFile, "w") as fileOutput:
            writer = csv.writer(fileOutput)
            for rowNumber in range(self.model.rowCount()):

                fields = [
                    
                    self.model.data(
                        self.model.index(rowNumber, columnNumber),
                        0
                    ) if columnNumber != 0 else ("Selected" if columnNumber == 0 and rowNumber == 0 else len(self.tableView.selectionModel().selectedRows()) == 0 or rowNumber in [x.row() for x in self.tableView.selectionModel().selectedRows()])
                    for columnNumber in range(self.model.columnCount())
                ]
                writer.writerow(fields)
            
        with open(self.paymentsFile, encoding='utf-8') as csv_file:
            reader = csv.DictReader(csv_file)
            scholars_list = []
            for row in reader:
                clean_row = {k: v for k, v in row.items() if v is not None and v != ''}
                integer_row = {k: int(v) for k, v in clean_row.items() if v.isdigit()}
                clean_row.update(integer_row)
                scholars_list.append(clean_row)

        payments_dict = {"Manager": self.account, "Scholars": scholars_list}

        with open(self.paymentsFile + ".json", 'w', encoding='utf-8') as f:
            json.dump(payments_dict, f, ensure_ascii=False, indent=4)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Axie Scholar Manager"))
        self.updateBalanceUi(MainWindow)

    def updateBalanceUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        self.label.setText(_translate("MainWindow", f"Your balance: {utils.check_balance(self.account)} SLP"))

    def claimButton(self, MainWindow):
        self.saveTable()
        payments_file_path = self.paymentsFile + ".json"
        # Claim SLP
        acm = AxieClaimsManager(payments_file_path)
        acm.verify_inputs()
        acm.prepare_claims()

        self.updateBalanceUi(MainWindow)

    def payButton(self, MainWindow):
        self.saveTable()
        self.updateBalanceUi(MainWindow)
        payments_file_path = self.paymentsFile + ".json"

        apm = AxiePaymentsManager(payments_file_path, auto=True)
        apm.verify_inputs()
        apm.prepare_payout()

    def updateButtonLabels(self):
        payButtonText =  "Pay all Scholars"
        claimButtonText = "Claim from all"

        if len(self.tableView.selectionModel().selectedRows()) > 0:
            payButtonText = "Pay selected Scholars"
            claimButtonText = "Claim from selection"

        self.buttonBox.button(QtWidgets.QDialogButtonBox.StandardButton.Ok).setText(payButtonText)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.StandardButton.Open).setText(claimButtonText)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
